/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistemasEcuaciones;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.awt.HeadlessException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JProgressBar;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author IESN
 */
public class frmMatriz extends javax.swing.JFrame {

    /**
     * Creates new form frmEntradas
     */
    public frmMatriz() {

        initComponents();
        setLocationRelativeTo(this);

    }

    public String frmE = "";
    operacionesMatriz mt = new operacionesMatriz();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        spnFilas = new javax.swing.JSpinner();
        spnColumnas = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaRes = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Elige un archivo que contenga los patrones de entrada");
        fileChooser.setFileFilter(new MyCustomFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText("Digita las Entradas Correspondientes ");

        jLabel2.setText("Filas");

        jLabel4.setText("Columnas");

        spnFilas.setModel(new javax.swing.SpinnerNumberModel(2, 2, null, 1));
        spnFilas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnFilasStateChanged(evt);
            }
        });

        spnColumnas.setModel(new javax.swing.SpinnerNumberModel(2, 2, null, 1));
        spnColumnas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnColumnasStateChanged(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane3.setViewportView(textArea);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tabla.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tablaInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setHeaderValue("Title 1");
            tabla.getColumnModel().getColumn(1).setHeaderValue("Title 2");
            tabla.getColumnModel().getColumn(2).setHeaderValue("Title 3");
        }

        tablaRes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tablaRes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaRes.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tablaResInputMethodTextChanged(evt);
            }
        });
        jScrollPane4.setViewportView(tablaRes);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(71, 71, 71)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spnColumnas, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spnFilas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(spnFilas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(spnColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                        .addGap(14, 14, 14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane3)))
                .addContainerGap())
        );

        jMenu1.setText("File");

        jMenuItem1.setText(" abrir Archivo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem8.setText("agregar Nueva");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Operaciones");

        jMenuItem2.setText("determinante");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("matrizInversa");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("matrizCofactores");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("matrizAdjunta");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("matrizTranspuesta");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("ver Original");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem9.setText("Solucionar por Gauss");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        tabla.setVisible(true);
    }//GEN-LAST:event_formWindowOpened

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        abrirArchivo();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void spnColumnasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnColumnasStateChanged
        // TODO add your handling code here:
        modelarTabla();
    }//GEN-LAST:event_spnColumnasStateChanged

    private void spnFilasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnFilasStateChanged
        // TODO add your handling code here:
        modelarTabla();
    }//GEN-LAST:event_spnFilasStateChanged

    private void tablaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tablaInputMethodTextChanged
        // TODO add your handling code here:
        cargarMatriz();
    }//GEN-LAST:event_tablaInputMethodTextChanged

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        operacionesMatriz("determinante");
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        operacionesMatriz("matrizAdjunta");
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        cargarMatriz();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        operacionesMatriz("matrizInversa");
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        operacionesMatriz("matrizCofactores");
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        operacionesMatriz("matrizTranspuesta");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        cargarTablaMatriz(matE);
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void tablaResInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tablaResInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaResInputMethodTextChanged

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        solucionarPorGauss();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");

        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMatriz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMatriz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMatriz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMatriz.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMatriz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSpinner spnColumnas;
    private javax.swing.JSpinner spnFilas;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tablaRes;
    public static javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    double[][] matE;

    private void cargarMatriz() {
        matE = new double[tabla.getRowCount()][tabla.getColumnCount()];
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                matE[i][j] = Double.parseDouble(tabla.getValueAt(i, j).toString());
            }
        }
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                System.out.print(matE[i][j] + " ");
            }
            System.out.println("");
        }

    }

    private void cargarTablaMatriz(double[][] m) {
        col = m[0].length;
        fil = m.length;
        modelarTabla();
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                tabla.setValueAt(m[i][j], i, j);
            }
        }
    }
    int col, fil;

    private void modelarTabla() {
        tabla.setVisible(true);
        fil = (int) spnFilas.getValue();
        col = (int) spnColumnas.getValue();

        String tituloTabla[] = new String[col];
        for (int i = 0; i < col; i++) {
            tituloTabla[i] = "x" + (i + 1);
        }

        Class[] tipoTabla = new Class[col];
        for (int i = 0; i < col; i++) {
            tipoTabla[i] = java.lang.Double.class;
        }

        Object obTabla[][] = new Object[fil][col];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < col; j++) {
                obTabla[i][j] = 0;
            }
        }

        tabla.setModel(new javax.swing.table.DefaultTableModel(
                obTabla,
                tituloTabla) {
            Class[] types = tipoTabla;

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        //tabla.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabla.setColumnSelectionAllowed(true);
        tabla.getTableHeader().setReorderingAllowed(false);
//        jScrollPane1.setViewportView(tabla);
//        jScrollPane1.setBounds(20, 80, col*83, fil*24);
        tabla.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        //tabla de igualdad
        String[] tituloTablaRes = new String[1];
        for (int i = 0; i < tituloTablaRes.length; i++) {
            tituloTablaRes[i] = "Y" + (i + 1);
        }

        Class[] tipoTablaRes = new Class[1];
        for (int i = 0; i < 1; i++) {
            tipoTablaRes[i] = java.lang.Double.class;
        }

        Object obTablaRes[][] = new Object[fil][1];
        for (int i = 0; i < fil; i++) {
            for (int j = 0; j < 1; j++) {
                obTablaRes[i][j] = 0;
            }
        }
        tablaRes.setModel(new javax.swing.table.DefaultTableModel(
                obTablaRes,
                tituloTablaRes
        ) {
            Class[] types = tipoTablaRes;

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        tablaRes.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaRes.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }

            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tablaResInputMethodTextChanged(evt);
            }
        });
    }

    private void abrirArchivo() {
        mt = new operacionesMatriz();
        matE = mt.abrirArchivo();
        if (matE != null) {
            spnFilas.setValue(matE.length);
            spnColumnas.setValue(matE[0].length);
            //actualizar la Tabla con el archivo que acabamode leer
            modelarTabla();
            for (int i = 0; i < fil; i++) {
                for (int j = 0; j < col; j++) {
                    tabla.setValueAt(matE[i][j], i, j);
                }
            }
        }
    }

    private void guardarArchivo() {
        String ruta;
        try {
            if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
                ruta = fileChooser.getSelectedFile().getAbsolutePath();
                //Aqui ya tiens la ruta,,,ahora puedes crear un fichero n esa ruta y escribir lo k kieras...
                File archivo = new File(ruta);
                boolean seguir = true;
                if (archivo.exists()) {
                    if (JOptionPane.OK_OPTION != JOptionPane.showConfirmDialog(this, "El fichero existe,deseas reemplazarlo?", "Titulo", JOptionPane.YES_NO_OPTION)) {
                        seguir = false;
                    }
                }

                if (seguir) {
                    try {
                        String cad;
                        try (FileWriter fw = new FileWriter(archivo, true)) {
                            PrintWriter pw = new PrintWriter(fw);
                            for (double[] matE1 : matE) {
                                cad = "";
                                for (int j = 0; j < matE1.length; j++) {
                                    cad = cad + (matE1[j] + " ");
                                }
                                pw.println(cad);
                            }
                        }

                    } catch (IOException ex) {
                        System.err.print("Excepcion: " + ex.getMessage());
                    }
                    if (!(ruta.endsWith(".txt"))) {
                        File temp = new File(ruta + ".txt");
                        fileChooser.getSelectedFile().renameTo(temp);//renombramos el archivo
                    }

                    JOptionPane.showMessageDialog(null, "Archivo Guardado exitoso!", "Guardando", JOptionPane.INFORMATION_MESSAGE);
                }

            }
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(null, "Error al guardar el archivo!", "Oops! Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void operacionesMatriz(String op) {
        if (matE != null) {
            switch (op) {
                case "determinante":
                    JOptionPane.showMessageDialog(null, "Determinante: " + mt.determinante(matE));
                    break;
                case "matrizInversa":
                    cargarTablaMatriz(mt.matrizInversa(matE));
                    break;
                case "matrizCofactores":
                    cargarTablaMatriz(mt.matrizCofactores(matE));
                    break;
                case "matrizAdjunta":
                    cargarTablaMatriz(mt.matrizAdjunta(matE));
                    break;
                case "matrizTranspuesta":
                    cargarTablaMatriz(mt.matrizTranspuesta(matE));
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(null, "matriz vacia", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    private void solucionarPorGauss() {
        double[][] matriz = new double[tabla.getRowCount()][tabla.getColumnCount() + 1];
        double[][] res = new double[tablaRes.getRowCount()][tabla.getColumnCount()];
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                matriz[i][j] = Double.parseDouble(tabla.getValueAt(i, j).toString());
            }
        }
        for (int i = 0; i < tablaRes.getRowCount(); i++) {
            for (int j = 0; j < tablaRes.getColumnCount(); j++) {
                res[i][j] = Double.parseDouble(tablaRes.getValueAt(i, j).toString());
            }
        }
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j < tabla.getColumnCount(); j++) {
                System.out.print(matriz[i][j] + " ");
            }
            System.out.println("");
        }

        for (int i = 0; i < tablaRes.getRowCount(); i++) {
            for (int j = 0; j < tablaRes.getColumnCount(); j++) {
                System.out.print(res[i][j] + " ");
            }
            System.out.println("");
        }
        for (int i = 0; i < tablaRes.getRowCount(); i++) {
            for (int j = 0; j < tablaRes.getColumnCount(); j++) {
                matriz[i][tabla.getColumnCount()]=res[i][j];
            }
            System.out.println("");
        }
        for (int i = 0; i < tabla.getRowCount(); i++) {
            for (int j = 0; j <= tabla.getColumnCount(); j++) {
                System.out.print(matriz[i][j] + " ");
            }
            System.out.println("");
        }
        mt.gauss(matriz);
    }

}

class MyCustomFilter extends javax.swing.filechooser.FileFilter {

    @Override
    public boolean accept(File file) {
        // Permitir sólo directorios o archivos con extensión ".txt"
        return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
    }

    @Override
    public String getDescription() {
        // Esta descripción se mostrará en el cuadro de diálogo,
        // hard-coded = feo, debe hacerse vía I18N
        return "Text documents (*.txt)";
    }

    public String setDescription() {
        // Esta descripción se mostrará en el cuadro de diálogo,
        // hard-coded = feo, debe hacerse vía I18N
        return "Text documents (*.txt)";
    }
}
